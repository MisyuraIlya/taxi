// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: matching.proto

package matching

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchingService_MatchClients_FullMethodName          = "/matching.MatchingService/MatchClients"
	MatchingService_UpdateUserStatus_FullMethodName      = "/matching.MatchingService/UpdateUserStatus"
	MatchingService_GetUserMatchingStatus_FullMethodName = "/matching.MatchingService/GetUserMatchingStatus"
)

// MatchingServiceClient is the client API for MatchingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MatchingService defines the gRPC API for matching client locations.
type MatchingServiceClient interface {
	// MatchClients receives a request with location details and returns matching client locations.
	MatchClients(ctx context.Context, in *MatchClientsRequest, opts ...grpc.CallOption) (*MatchClientsResponse, error)
	// UpdateUserStatus updates the matching status of a user.
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*UpdateUserStatusResponse, error)
	// GetUserMatchingStatus fetches the current matching status of a user.
	GetUserMatchingStatus(ctx context.Context, in *GetUserMatchingStatusRequest, opts ...grpc.CallOption) (*GetUserMatchingStatusResponse, error)
}

type matchingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingServiceClient(cc grpc.ClientConnInterface) MatchingServiceClient {
	return &matchingServiceClient{cc}
}

func (c *matchingServiceClient) MatchClients(ctx context.Context, in *MatchClientsRequest, opts ...grpc.CallOption) (*MatchClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchClientsResponse)
	err := c.cc.Invoke(ctx, MatchingService_MatchClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*UpdateUserStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserStatusResponse)
	err := c.cc.Invoke(ctx, MatchingService_UpdateUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) GetUserMatchingStatus(ctx context.Context, in *GetUserMatchingStatusRequest, opts ...grpc.CallOption) (*GetUserMatchingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserMatchingStatusResponse)
	err := c.cc.Invoke(ctx, MatchingService_GetUserMatchingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchingServiceServer is the server API for MatchingService service.
// All implementations must embed UnimplementedMatchingServiceServer
// for forward compatibility.
//
// MatchingService defines the gRPC API for matching client locations.
type MatchingServiceServer interface {
	// MatchClients receives a request with location details and returns matching client locations.
	MatchClients(context.Context, *MatchClientsRequest) (*MatchClientsResponse, error)
	// UpdateUserStatus updates the matching status of a user.
	UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*UpdateUserStatusResponse, error)
	// GetUserMatchingStatus fetches the current matching status of a user.
	GetUserMatchingStatus(context.Context, *GetUserMatchingStatusRequest) (*GetUserMatchingStatusResponse, error)
	mustEmbedUnimplementedMatchingServiceServer()
}

// UnimplementedMatchingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchingServiceServer struct{}

func (UnimplementedMatchingServiceServer) MatchClients(context.Context, *MatchClientsRequest) (*MatchClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchClients not implemented")
}
func (UnimplementedMatchingServiceServer) UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*UpdateUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedMatchingServiceServer) GetUserMatchingStatus(context.Context, *GetUserMatchingStatusRequest) (*GetUserMatchingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMatchingStatus not implemented")
}
func (UnimplementedMatchingServiceServer) mustEmbedUnimplementedMatchingServiceServer() {}
func (UnimplementedMatchingServiceServer) testEmbeddedByValue()                         {}

// UnsafeMatchingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingServiceServer will
// result in compilation errors.
type UnsafeMatchingServiceServer interface {
	mustEmbedUnimplementedMatchingServiceServer()
}

func RegisterMatchingServiceServer(s grpc.ServiceRegistrar, srv MatchingServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchingService_ServiceDesc, srv)
}

func _MatchingService_MatchClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).MatchClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_MatchClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).MatchClients(ctx, req.(*MatchClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_UpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_GetUserMatchingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMatchingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).GetUserMatchingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_GetUserMatchingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).GetUserMatchingStatus(ctx, req.(*GetUserMatchingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchingService_ServiceDesc is the grpc.ServiceDesc for MatchingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matching.MatchingService",
	HandlerType: (*MatchingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MatchClients",
			Handler:    _MatchingService_MatchClients_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _MatchingService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "GetUserMatchingStatus",
			Handler:    _MatchingService_GetUserMatchingStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matching.proto",
}
